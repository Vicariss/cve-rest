from flask import Blueprint, jsonify, request, current_app
from application import db_client, db_connect
from passlib.hash import pbkdf2_sha256


user_bp = Blueprint("user_bp", __name__)


""" mongodb connection """
collection = db_connect(collection_name='user')


@user_bp.route('/user/register', methods=["POST"])
def user_register():
    """Endpoint for user registration."""
    try:
        # collection = db_connect(collection_name='user')

        # user input
        request_json_data = request.get_json()
        username = str(request_json_data["username"])
        password = str(request_json_data["password"])

        password_hash = pbkdf2_sha256.hash(password)

        # check if user already exists
        user = collection.find_one({"username": username})
        if user:
            # if user already exists, throw HTTP 409 - conflict
            return jsonify(message="User already exists. Try again."), 409
        user_data = {
            "username": username,
            "password": password_hash
            }
        collection.insert_one(user_data)
        # is user has been created successfully
        return jsonify(message=f"User {username} created successfully, token: XCLJKvhnsdkjfhjk#H$K"), 201

    except Exception as e:
        print(e)

    # if something failed throw HTTP 400 - bad request
    return jsonify(message=f"Something went wrong. Try again."), 400


@user_bp.route('/user/authenticate', methods=['POST'])
def user_authenticate():
    try:
        # collection = db_connect(collection_name='user')

        # user input
        request_json_data = request.get_json()
        username = str(request_json_data["username"])
        password = str(request_json_data["password"])


        user = collection.find_one({"username": username})
        if user:
            pass_verification = pbkdf2_sha256.verify(password, user["password"])
            if pass_verification is True:
                return jsonify(message="User authenticated successfully.", user=user["username"], id=str(user["_id"]))
            else:
                return jsonify(message="User authentication failure.")
        else:
            return jsonify(message="User does not exist.")
            


    except Exception as e:
        print(e)



@user_bp.route('/user/delete', methods=["DELETE"])
def user_delete():
    """Endpoint for user deletion."""
    try:
        # collection = db_connect(collection_name='user')

        # user input
        request_json_data = request.get_json()
        username = str(request_json_data["username"])
        password = str(request_json_data["password"])

        user = collection.find_one({"username": username})
    
        # check if user exists
        if not user:
            return jsonify(message="User does not exist.")
        user = collection.delete_one({"password": password})

        return jsonify(message="User deleted successfully."), 200

    except Exception as e:
        print(e)


@user_bp.route('/user/update', methods=["PUT"])
def user_update():
    """Endpoint for updating user data."""
    pass


@user_bp.route('/user/info/<username>', methods=["GET"])
def user_info(username):
    """Endpoint for printing user data."""
    try:
        # collection = db_connect(collection_name='user')

        # {'_id': ObjectId('62cec...'), 'username': 'mike', 'password': 'X'}
        user = collection.find_one({"username": username})  # dict

        # check if user exists
        if not user:
            return jsonify(message="User does not exist."), 404
        return jsonify(
            id=str(user["_id"]), ## _id is ObjectId
            username=user["username"], 
            password=user["password"]), 200

    except Exception as e:
        print(e)

from flask import Blueprint, jsonify, request, current_app
from passlib.hash import pbkdf2_sha256
from application import db_client, db_connect
from datetime import datetime, timedelta
from functools import wraps
import jwt
from jwt.exceptions import ExpiredSignatureError


user_bp = Blueprint("user_bp", __name__)

""" mongodb connection """
collection = db_connect(collection_name='user')


def token_required(func):  # as argument takes function that is decorated
    @wraps(func)  # replace inner.__doc__ with func.__doc__ on help()
    def inner(*args, **kwargs):  # arbitrary function that can serve pretty much everything
        token = None

        # check for token in request headers
        if 'token' in request.headers:
            token = request.headers['token']
        if not token:
            return jsonify(message="Token is missing."), 401
        
        try:
            data = jwt.decode(
                jwt=str(token),
                key=current_app.config["SECRET_KEY"], 
                algorithms=['HS256'])
            # current_user = collection.find_one({"username": data["user"]})
            # get current user only if theres need to authorize on endpoints
        except ExpiredSignatureError:
            return jsonify(message="Token expired."), 401
        except Exception:
            return jsonify(message="Invalid token."), 401
            
        return func(*args, **kwargs)
    return inner


@user_bp.route('/user/register', methods=["POST"])
def user_register():
    """Endpoint for user registration."""
    
    # user input
    request_json_data = request.get_json()
    username = str(request_json_data["username"])
    password = str(request_json_data["password"])

    password_hash = pbkdf2_sha256.hash(password)

    # check if user already exists
    user_exist = collection.find_one({"username": username})
    if user_exist:
        # if user already exists, throw HTTP 409 - conflict
        return jsonify(message="User already exists. Try again."), 409
        
    # if user does not exist, save user to database
    user_credentials = {
        "username": username,
        "password": password_hash
        }
    collection.insert_one(user_credentials)
    # is user has been created successfully
    return jsonify(message=f"User {username} created successfully, you can now log in."), 201



@user_bp.route('/user/login', methods=['POST'])
def user_login():
    """ User authentication endpodint. After successfull login return 1h-valid JWT to user."""

    # user input
    request_json_data = request.get_json()
    username = str(request_json_data["username"])
    password = str(request_json_data["password"])

    # https://blog.logrocket.com/how-to-secure-a-rest-api-using-jwt-7efd83e71432/
    # header = type of token, payload = data pertaining to the request, signature = secret key

    user = collection.find_one({"username": username})
    if user:
        passw_verification = pbkdf2_sha256.verify(password, user["password"])
        if passw_verification is True:
            # create and grant token
            token = jwt.encode(
                payload={'user': user["username"], "exp": datetime.utcnow() + timedelta(seconds=120)},
                key=current_app.config["SECRET_KEY"],
                algorithm="HS256")
            
            return jsonify(message="User authenticated successfully.", token=token), 200
        else:
            return jsonify(message="User authentication failure.")
    else:
        return jsonify(message="User does not exist.")
    


@user_bp.route('/user/delete', methods=["DELETE"])
def user_delete():
    """Endpoint for user deletion."""

    # user input
    request_json_data = request.get_json()
    username = str(request_json_data["username"])
    password = str(request_json_data["password"])

    user = collection.find_one({"username": username})

    # check if user exists
    if not user:
        return jsonify(message="User does not exist.")
    user = collection.delete_one({"password": password})

    return jsonify(message="User deleted successfully."), 200


@user_bp.route('/user/update', methods=["PUT"])
def user_update():
    """Endpoint for updating user data."""
    pass


# Endpoint for manual tests, will be deleted 
@user_bp.route('/user/info/<username>', methods=["GET"])
def user_info(username):
    """Endpoint for printing user data."""

    # {'_id': ObjectId('62cec...'), 'username': 'mike', 'password': 'X'}
    user = collection.find_one({"username": username})  # dict

    # check if user exists
    if not user:
        return jsonify(message="User does not exist."), 404
    return jsonify(
        id=str(user["_id"]), ## _id is ObjectId
        username=user["username"], 
        password=user["password"]), 200

